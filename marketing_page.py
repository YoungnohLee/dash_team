# -*- coding: utf-8 -*-
"""marketing_page.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gXBt11vYy-Yb2fhqwaCiYgGRGX6EFkhF
"""

import dash
from dash import Dash, html, dcc, Input, Output
import warnings
import hi_database
import hi_class
import bw_class
import pandas as pd
import plotly.graph_objects as go

warnings.filterwarnings('ignore')



# app.
layout = html.Div(
    style={'overflow-x': 'hidden'},
    children=[
        html.Div(
            style={'textAlign': 'center', 'padding': '20px'},
            children=[
                html.H1('Marketing Cost Prediction Dashboard', style={'font-family': 'IntegralCF-ExtraBold', 'color': 'slategray'}),
                dcc.Tabs(id='tabs', value='overall', children=[
                    dcc.Tab(label='Overall Data', value='overall'),
                    dcc.Tab(label='VIP 고객', value='cluster-0'),
                    dcc.Tab(label='관심 고객', value='cluster-1'),
                    dcc.Tab(label='우수 고객', value='cluster-2'),
                    dcc.Tab(label='이탈 고객', value='cluster-3'),
                    dcc.Tab(label='잠재 고객', value='cluster-4'),
                ]),
                dcc.Graph(id='marketing-cost-graph')
            ]
        )
    ]
)

from app import app

@dash_app.callback(
    Output('marketing-cost-graph', 'figure'),
    Input('tabs', 'value')
)
def update_graph(tab_value):
    # Load data and perform RFM clustering
    df = hi_database.db_to_df(db_name="TRAIN.DB", table_name="train_table")
    processor = bw_class.RFMProcessor(df)
    rfm_without_outliers, rfm_outliers, rfm_without_outliers_log, X_scaled = processor.process_data()
    processor.fit_clustering(X_scaled, n_clusters=5)
    new_data_predictions = processor.predict(df)

    cluster_data = bw_class.mapping_cluster(new_data_predictions)
    cluster = cluster_data[['고객ID','Recency','Frequency','Monetary','고객분류']]
    train_hi = df.merge(cluster, on='고객ID', how='left')

    # Auto ARIMA processing
    hi_pipeline = hi_class.AutoArimaPipeline()
    df_arima = hi_pipeline.hi_preprocessing(train_hi)
    out = hi_pipeline.split_data_by_cluster(df_arima)
    train0, test0 = hi_pipeline.create_train_test_by_cluster(train_hi, out)

    hi_pipeline.fit(train0)
    predictions = hi_pipeline.predict(test0)

    # Visualizer
    visualizer = hi_class.hi_visualizer(data=train0, clusters=predictions)

    if tab_value == "overall":
        figure = visualizer.visualize_overall()
    else:
        cluster_number = int(tab_value.split('-')[-1])
        figure = visualizer.visualize_cluster(cluster_number)

    return figure

#if __name__ == '__main__':
#    app.run_server(debug=True)